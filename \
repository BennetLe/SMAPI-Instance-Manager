use std::{
    collections::HashMap,
    env,
    fs::{self, File},
    io,
    process::Command,
};

use serde::{Deserialize, Serialize};
use serde_json::to_writer_pretty;

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Instance {
    folder_name: String,
    smapi_path: Option<String>,
}

impl Instance {
    fn new(folder_name: String, smapi_path: Option<String>) -> Instance {
        Instance {
            folder_name,
            smapi_path,
        }
    }
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Manager {
    instances: HashMap<String, Instance>,
    smapi_path: String,
}

impl Manager {
    fn new(smapi_path: String) -> Manager {
        let mut app = Manager {
            smapi_path,
            instances: HashMap::new(),
        };
        let instance = Instance::new("Mods".into(), None);
        app.instances.insert("Default".into(), instance);
        app
    }

    fn load_config() -> Result<Manager, String> {
        let contents = match fs::read_to_string("./config.json") {
            Ok(c) => c,
            Err(e) => return Err(e.to_string()),
        };
        let manager: Manager = match serde_json::from_str(contents.as_str()) {
            Ok(m) => m,
            Err(e) => return Err(e.to_string()),
        };
        Ok(manager)
    }

    fn run(&self, instance: Instance) {
        let path = instance.smapi_path.unwrap_or(self.smapi_path.clone());
        let terminal = env::var("$TERMINAL").unwrap_or("konsole".into());

        let mut shell = Command::new(terminal)
            .args([
                "--",
                "steam-run",
                path.as_str(),
                "--mods-path",
                instance.folder_name.as_str(),
            ])
            .spawn()
            .expect("Failed to spawn shell for smapi");
        let result = shell.wait();
        match result {
            Ok(_) => (),
            Err(e) => println!("{e}"),
        }
    }

    fn add_instance(&mut self, instance: Instance, name: String) {
        self.instances.insert(name, instance);
    }

    fn save(&self) {
        let f = File::create("./config.json").unwrap();
        to_writer_pretty(f, &self).expect("Failed to write to file");
    }
}

pub enum CurrentScreen {
    Main,
    Add,
    Remove,
    Exit,
}

struct App {
    manager: Manager,
}

impl App {
    fn new() -> App {
        let manager = match Manager::load_config() {
            Ok(m) => m,
            Err(_) => {
                println!("Creating config file");
                println!("Enter the path to your smapi installation: ");
                let mut smapi_path: String = String::new();
                io::stdin()
                    .read_line(&mut smapi_path)
                    .expect("Failed to read stdin");
                let path = format!("{}/StardewModdingAPI", smapi_path.replace(['\n', '\r'], ""));
                Manager::new(path)
            }
        };
        App { manager }
    }
}

fn main() {
    let mut app = App::new();
    app.manager.save();
    app.manager
        .run(app.manager.instances.get("Default").unwrap().clone());
}
